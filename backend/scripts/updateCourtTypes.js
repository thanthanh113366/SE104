/**
 * Script ƒë·ªÉ c·∫≠p nh·∫≠t lo·∫°i s√¢n trong Firestore
 * Ch·∫°y script n√†y m·ªôt l·∫ßn ƒë·ªÉ fix d·ªØ li·ªáu
 */

const admin = require('firebase-admin');
const serviceAccount = require('../config/serviceAccountKey');

// Kh·ªüi t·∫°o Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    projectId: serviceAccount.project_id
  });
}

const db = admin.firestore();

// Map t√™n s√¢n v·ªõi lo·∫°i s√¢n d·ª±a tr√™n t√™n
const mapCourtNameToType = (name) => {
  const lowerName = name.toLowerCase();
  
  if (lowerName.includes('b√≥ng ƒë√°') || lowerName.includes('football')) {
    return 'football';
  } else if (lowerName.includes('c·∫ßu l√¥ng') || lowerName.includes('badminton')) {
    return 'badminton';
  } else if (lowerName.includes('b√≥ng r·ªï') || lowerName.includes('basketball')) {
    return 'basketball';
  } else if (lowerName.includes('tennis')) {
    return 'tennis';
  } else if (lowerName.includes('b√≥ng chuy·ªÅn') || lowerName.includes('volleyball')) {
    return 'volleyball';
  } else if (lowerName.includes('bida') || lowerName.includes('billiards')) {
    return 'billiards';
  } else {
    // M·∫∑c ƒë·ªãnh l√† b√≥ng ƒë√° n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
    return 'football';
  }
};

const updateCourtTypes = async () => {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t lo·∫°i s√¢n...');
    
    // L·∫•y t·∫•t c·∫£ s√¢n
    const courtsRef = db.collection('courts');
    const snapshot = await courtsRef.get();
    
    console.log(`üìä T√¨m th·∫•y ${snapshot.size} s√¢n c·∫ßn c·∫≠p nh·∫≠t`);
    
    const batch = db.batch();
    let updateCount = 0;
    
    snapshot.forEach((doc) => {
      const data = doc.data();
      const courtName = data.name || '';
      const currentType = data.type || '';
      
      // X√°c ƒë·ªãnh lo·∫°i s√¢n t·ª´ t√™n
      const newType = mapCourtNameToType(courtName);
      
      console.log(`üìù S√¢n: "${courtName}"`);
      console.log(`   - Type hi·ªán t·∫°i: "${currentType}"`);
      console.log(`   - Type m·ªõi: "${newType}"`);
      
      // C·∫≠p nh·∫≠t n·∫øu c·∫ßn
      if (currentType !== newType) {
        const courtRef = courtsRef.doc(doc.id);
        batch.update(courtRef, {
          type: newType,
          updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });
        updateCount++;
        console.log(`   ‚úÖ S·∫Ω c·∫≠p nh·∫≠t type th√†nh "${newType}"`);
      } else {
        console.log(`   ‚è≠Ô∏è  Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t`);
      }
      
      console.log('---');
    });
    
    // Th·ª±c hi·ªán batch update
    if (updateCount > 0) {
      await batch.commit();
      console.log(`üéâ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng ${updateCount} s√¢n!`);
    } else {
      console.log('‚ÑπÔ∏è  Kh√¥ng c√≥ s√¢n n√†o c·∫ßn c·∫≠p nh·∫≠t');
    }
    
    console.log('‚ú® Ho√†n th√†nh c·∫≠p nh·∫≠t lo·∫°i s√¢n');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t lo·∫°i s√¢n:', error);
    process.exit(1);
  }
};

// Ch·∫°y script
updateCourtTypes(); 