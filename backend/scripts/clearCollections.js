const readline = require('readline');

// Import Firebase config t·ª´ c·∫•u h√¨nh hi·ªán c√≥ c·ªßa d·ª± √°n
let db;
try {
  const config = require('../config/db');
  db = config.db;
  console.log('‚úÖ ƒê√£ t·∫£i c·∫•u h√¨nh Firebase th√†nh c√¥ng');
} catch (error) {
  console.error('‚ùå L·ªói t·∫£i c·∫•u h√¨nh Firebase:', error.message);
  console.log('üìù H∆∞·ªõng d·∫´n: ƒê·∫£m b·∫£o file .env c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin Firebase Admin SDK');
  process.exit(1);
}

// C√°c collection c·∫ßn x√≥a
const COLLECTIONS_TO_CLEAR = ['bookings', 'payments', 'reviews'];

/**
 * X√≥a t·∫•t c·∫£ documents trong m·ªôt collection
 * @param {string} collectionName - T√™n collection
 */
async function clearCollection(collectionName) {
  try {
    console.log(`üîÑ ƒêang x√≥a collection: ${collectionName}...`);
    
    const collectionRef = db.collection(collectionName);
    const snapshot = await collectionRef.get();
    
    if (snapshot.empty) {
      console.log(`‚úÖ Collection ${collectionName} ƒë√£ tr·ªëng`);
      return;
    }
    
    console.log(`üìä T√¨m th·∫•y ${snapshot.size} documents trong ${collectionName}`);
    
    // X√≥a theo batch (t·ªëi ƒëa 500 documents m·ªói batch)
    const batch = db.batch();
    let count = 0;
    
    for (const doc of snapshot.docs) {
      batch.delete(doc.ref);
      count++;
      
      // N·∫øu ƒë·∫°t gi·ªõi h·∫°n batch, commit v√† t·∫°o batch m·ªõi
      if (count === 500) {
        await batch.commit();
        console.log(`  ‚û§ ƒê√£ x√≥a ${count} documents...`);
        count = 0;
      }
    }
    
    // Commit batch cu·ªëi c√πng n·∫øu c√≤n documents
    if (count > 0) {
      await batch.commit();
    }
    
    console.log(`‚úÖ ƒê√£ x√≥a ho√†n t·∫•t collection: ${collectionName} (${snapshot.size} documents)`);
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi x√≥a collection ${collectionName}:`, error.message);
    throw error;
  }
}

/**
 * X√≥a t·∫•t c·∫£ collections ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
 */
async function clearAllCollections() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu x√≥a c√°c collections...\n');
    
    for (const collectionName of COLLECTIONS_TO_CLEAR) {
      await clearCollection(collectionName);
      console.log(''); // D√≤ng tr·ªëng ƒë·ªÉ d·ªÖ ƒë·ªçc
    }
    
    console.log('üéâ Ho√†n th√†nh! T·∫•t c·∫£ collections ƒë√£ ƒë∆∞·ª£c x√≥a.');
    
  } catch (error) {
    console.error('‚ùå C√≥ l·ªói x·∫£y ra:', error.message);
    process.exit(1);
  }
}

/**
 * Hi·ªÉn th·ªã th√¥ng tin v√† y√™u c·∫ßu x√°c nh·∫≠n
 */
async function confirmAndExecute() {
  console.log('üî• SCRIPT X√ìA D·ªÆ LI·ªÜU FIREBASE FIRESTORE üî•\n');
  console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu trong c√°c collections sau:');
  COLLECTIONS_TO_CLEAR.forEach(collection => {
    console.log(`   - ${collection}`);
  });
  console.log('\nüö´ H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!\n');
  
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    rl.question('‚ùì B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (g√µ "YES" ƒë·ªÉ x√°c nh·∫≠n): ', (answer) => {
      rl.close();
      
      if (answer.trim().toUpperCase() === 'YES') {
        console.log('\n‚úÖ X√°c nh·∫≠n th√†nh c√¥ng. B·∫Øt ƒë·∫ßu x√≥a d·ªØ li·ªáu...\n');
        resolve(true);
      } else {
        console.log('\n‚ùå ƒê√£ h·ªßy. Kh√¥ng c√≥ d·ªØ li·ªáu n√†o b·ªã x√≥a.');
        resolve(false);
      }
    });
  });
}

/**
 * Ki·ªÉm tra k·∫øt n·ªëi Firebase tr∆∞·ªõc khi th·ª±c hi·ªán
 */
async function checkFirebaseConnection() {
  try {
    console.log('üîç Ki·ªÉm tra k·∫øt n·ªëi Firebase...');
    
    // Test b·∫±ng c√°ch ƒë·ªçc m·ªôt collection
    const testRef = db.collection('bookings').limit(1);
    await testRef.get();
    
    console.log('‚úÖ K·∫øt n·ªëi Firebase th√†nh c√¥ng!\n');
    return true;
  } catch (error) {
    console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Firebase:', error.message);
    console.log('üìù Ki·ªÉm tra l·∫°i c·∫•u h√¨nh Firebase v√† k·∫øt n·ªëi m·∫°ng.');
    return false;
  }
}

/**
 * Hi·ªÉn th·ªã th·ªëng k√™ tr∆∞·ªõc khi x√≥a
 */
async function showStatistics() {
  try {
    console.log('üìä TH·ªêNG K√ä D·ªÆ LI·ªÜU HI·ªÜN T·∫†I:\n');
    
    for (const collectionName of COLLECTIONS_TO_CLEAR) {
      try {
        const snapshot = await db.collection(collectionName).get();
        console.log(`   ${collectionName}: ${snapshot.size} documents`);
      } catch (error) {
        console.log(`   ${collectionName}: Kh√¥ng th·ªÉ ƒë·∫øm (${error.message})`);
      }
    }
    
    console.log('');
  } catch (error) {
    console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™:', error.message);
  }
}

/**
 * Main function
 */
async function main() {
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi
    const connected = await checkFirebaseConnection();
    if (!connected) {
      process.exit(1);
    }
    
    // Hi·ªÉn th·ªã th·ªëng k√™
    await showStatistics();
    
    // X√°c nh·∫≠n v√† th·ª±c hi·ªán
    const confirmed = await confirmAndExecute();
    if (confirmed) {
      await clearAllCollections();
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong ƒë·ª£i:', error);
    process.exit(1);
  }
}

// Ch·∫°y script
if (require.main === module) {
  main();
}

module.exports = {
  clearCollection,
  clearAllCollections
}; 